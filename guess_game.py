"""A number guessing game such that generates a random number and asks the user to guess it and counting the number of attempts it takes them to guess it correctly."""


__author__ = "Johnseb18"


from random import randint


points: int = 0  # adventure points
player: str = ""
wii: int = 0 
SKULL_EMOJI = "\U00002620"


def main() -> None:
    """Main function.""" 
    greet()
    while wii == 0:
        print("Choose one of the three options:")
        print("1. SOLO: (A number will be randomly generated and you attempt to guess)")
        print("2. MULTIPLAYER: (Input the number yourself and have your friend guess)")
        print(f"3. End game now {SKULL_EMOJI}")
        x = int(input("Please choose an option by typing either 1, 2, or 3 -> "))
        if x == 1:
            one()
        elif x == 2:
            # global points
            two(points) 
        elif x == 3:
            three()
            return
        print(f"Hello {player}, so far you have {points} adventure points!")
    

def greet() -> None:
    """Using a call to the greet procedure."""
    print("Hello! Welcome to Number Guesser! In this game you will be able to list a range of numbers, and then attempt to  guess the randomly generated number.")
    global player
    player = input("To start off, please list your name: ")


def one() -> None:
    """SOLO: Number randomly generated."""
    print(f"Thank you for selecting SOLO as the game mode, {player}.")
    print("Next, think of a range you want your number to have.")
    print("For example, if your range was 1-10, the number you will try to guess will be between 1 and 10.")
    least = int(input("Please list the lowest part of range here: "))
    highest = int(input("Please list the highest part of range here: "))
    compare: int = 9
    global points
    while highest - least >= compare:
        points += 5
        compare += 10
    guesser_one(least, highest)


def two(p: int) -> int:
    """MULTIPLAYER: Number generated by one player, then the other player guesses."""
    print(f"Thank you for selecting MULTIPLAYER as the game mode, {player}.")
    print(f"{player} will set a number that Player Two will guess.")
    print("Think of a range you want your number to have.")
    print("For example, if the range was 1-10, the number Player Two will try to guess will be between 1 and 10.")
    least = int(input(f"{player}: Please list the lowest part of range here: "))
    highest = int(input(f"{player}: Please list the highest part of range here: "))
    number = int(input(f"{player}: Next, list a number that falls into that range: "))
    assert number >= least and number <= highest
    compare: int = 9
    global points 
    while highest - least >= compare:
        points += 5
        compare += 10
    guesser_two(least, highest, number)
    return points


def three() -> None:
    """End game function."""
    print(f"Thank you for playing! You finished with {points} adventure points.")


def guesser_one(x: int, y: int) -> None:
    """Where the guessing magic happens for SOLO."""
    number = randint(x, y)
    guess = int(input(f"Guess a number between {x} and {y}. "))
    while guess != number:
        if guess > number:
            guess = int(input("Your guess was too high, please guess again. "))
        if guess < number:
            guess = int(input("Your guess was too low, please guess again. "))
    if guess == number:
        print(f"Congratulations {player}! You guessed the number correctly.")


def guesser_two(x: int, y: int, number: int) -> None:
    """Where the guessing magic happens for MULTIPLAYER."""
    guess = int(input(f"Player Two: Guess a number between {x} and {y}. "))
    while guess != number:
        if guess > number:
            guess = int(input("Player Two: Your guess was too high, please guess again. "))
        if guess < number:
            guess = int(input("Player Two: Your guess was too low, please guess again. "))
    if guess == number:
        print("Player Two: Congratulations! You guessed the number correctly.")


if __name__ == "__main__":
    main()